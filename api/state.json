{"docs":{"id":"root","children":[{"id":"docs/about","contents":"---\noptions:\n  order: 0\n---\n# How to use the docs \n\n> :woman_student: **Level**: Beginner\n\n`patternplate` documentation is categorized into [Guides](#guides), [Advanced](#advanced) and [References](#references). \nAll doc items state the recommended [skill level](#levels):woman_student:. \nGuides and Advanced topics will also state the time :timer_clock: it will take to complete them.\n  \n## Levels\n\n> :information_source: \n> The levels are meant to help you understand where to begin your journey with patternplate. Don't let them put you off!\n>\n> **Lost with a guide?** Come join us at our [Gitter Organization](https://gitter.im/patternplate/Lobby) and we'll help you. \n> Also feel free to [post an issue on GitHub](https://github.com/patternplate/patternplate/issues/new) if something is hard to understand in our docs. \n> \n> Thank you! :bow:\n\nThe recommended levels for the instructions in this documentation are structured according to the technical knowledge required. \n\n* **Beginners**: No technical knowledge required. We'll guide you through everything.\n* **Intermediate**: Basic knowledge of Markdown, JSON and YAML is required. Experience with using the command line helps.\n* **Expert**: Safe handling of data formats. Basic knowledge of HTML, CSS JavaScript\n\n## Guides\n\nInstructions for common use cases that can be followed step by step. \nThis is where you'll want to begin when exploring patternplate and its features.\nMost guides are written **for beginners**.\n\n```widget\nconst React = require(\"react\");\nconst {PatternList} = require(\"@patternplate/widgets\");\nmodule.exports = () => <PatternList query=\"tags=Guide AND is=doc\" />;\n```\n\n## Advanced\n\nAdvanced topics usually require technical knowledge at the level of a professional software developer. \n\nMost users will rarely read this section unless they are entrusted with the technical setup of a patternplate project.\n\n```widget\nconst React = require(\"react\");\nconst {PatternList} = require(\"@patternplate/widgets\");\nmodule.exports = () => <PatternList query=\"tags=Advanced AND is=doc\" />;\n```\n\n## References\n\nDetailed technical documentation about various `patternplate` features\nand its API. The reference section will become your go-to place for docs as you grow more familiar\nwith `patternplate`. References are written with **intermediate users** and **developers** in mind. \n\n```widget\nconst React = require(\"react\");\nconst {PatternList} = require(\"@patternplate/widgets\");\nmodule.exports = () => <PatternList query=\"tags=Reference AND is=doc\" />;\n```\n","contentType":"doc","path":"docs/about.md","manifest":{"name":"how-to-use-the-docs","displayName":"How to use the docs","description":"","flag":"alpha","options":{"order":0},"tags":[],"version":"1.0.0"},"rawManifest":{"options":{"order":0}}},{"id":"docs/advanced/build","contents":"---\ndisplayName: \"Advanced: Build systems\"\ndescription: \"Learn how to use patternplate on top of your build system\"\ntags: \n - Advanced\noptions:\n  order: 7\n---\n\n# Use patternplate on top of a build system\n\n> :timer_clock: **Time invest**: 30 Minutes ––– :woman_student: **Level**: Expert\n\n\n## What to expect\n\nA lot of web projects opt into authoring their source code in a different format than the one it is delivered and executed in. This might involve transformations such as bundling, minifying and transpiling. `patternplate` supports those setups just fine, let's see how.\n\nWe will …\n\n* … learn how to set up a recommended [Babel](https://babeljs.io/) setup \n* … configure patternplate to read the transpiled Babel results\n\n## You'll need\n\n* :writing_hand: Text editor\n* :computer: Terminal (MacOS: [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=6` ([Install](https://nodejs.org/en/))\n\n## Before you start\n\n* Be comfortable with terminal usage\n* Have a working knowledge of `git`\n* Have working knowledge of JavaScript build tooling\n\n## Set up Babel\n\n> :information_source: \n> We are using Babel here as an example, mainly because it is\nthe ubiquitous in the JavaScript ecosystem at the time of writing. \n>\n> The principles described below apply to any build system emitting JavaScript (optionally HTML and CSS).\n\n1. Open a terminal window and create a new project folder: \n\n  ```bash\n  mkdir babel-patternplate\n  ```\n\n2. Initialize the project with a `package.json` file:\n\n  ```bash\n  npm init # will ask you a bunch of questions\n  ```\n\n3. Install required Babel packages as development dependencies\n\n  ```bash\n  npm install -D @babel/cli @babel/core @babel/preset-env\n  ```\n\n4. Create a `.babelrc` and configure Babel to use the `env` preset\n\n  ```js\n  // .babelrc\n  {\n    \"presets\": [\n      \"@babel/preset-env\"\n    ]\n  }\n  ```\n\n5. Test your babel setup with a file containing new JavaScript features.\n\n  Copy the following into `test.js`\n\n  ```js\n  // test.js\n  async function main() {\n    console.log(\"Hello world\");\n  }\n\n  main();\n  ```\n\n  Then execute babel on it\n\n  ```bash\n  yarn babel test.js\n  ```\n\n  This should emit something like: \n\n  <details>\n\n    ```js\n    \"use strict\";\n\n    function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step(\"next\", value); } function _throw(err) { step(\"throw\", err); } _next(); }); }; }\n\n    // test.js\n    function main() {\n      return _main.apply(this, arguments);\n    }\n\n    function _main() {\n      _main = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"Hello world\");\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      return _main.apply(this, arguments);\n    }\n\n    main();\n    ```\n\n  </details>\n\n6. Remove `test.js` \n\n  ```bash\n  rm test.js\n\n7. Create a `src/` folder with some component sources in it:\n\n  ```\n  mkdir -p src/button\n  \n  cat > src/button/demo.js << EOF\n  module.exports = {\n    default: () => console.log(\"Button\"),\n    html: () => \\`<button>ES2015 Button</button>\\`,\n    css: () => \\`button {\n      padding: 10px 15px;\n      font-size: 20px; \n      background: none; \n      color: cornflowerblue; \n      border: 1px solid currentColor;\n    }\\`\n  };\n  EOF\n  \n  cat > src/button/pattern.json << EOF\n  {\n    \"name\": \"button\",\n    \"version\": \"1.0.0\"\n  }\n  EOF\n  ```\n\n7. Your src folder should look like this:\n\n  ```bash\n  # TL;DR: commands above create a file tree like this\n  tree src\n  src\n  └── button\n      ├── demo.js\n      └── pattern.json\n\n  1 directory, 2 files\n  ```\n\n8. Test drive Babel on `src/`:\n\n  > :warning: We use a Babel feature to copy non-JavaScript\n  > files from the src directory on change. This is not available\n  > in all systems (e.g. TypeScript). \n  >\n  > Work around this by copying non-js files with `cpx`, **or** enable\n  > source-maps in your compilation step. `patternplate` uses them to \n  > trace back to your sources if available.\n\n  ```bash\n  # Build all js files from src to lib, copy non-js\n  babel src -D -d lib \n  ```\n\n9. The result in `lib` should look like this:\n\n  ```\n  tree lib\n  lib\n  └── button\n      ├── demo.js\n      └── pattern.json\n  \n  1 directory, 2 files\n  ```\n\n10. Save your Babel command as run-script into `package.json` like this\n\n  ```json\n  {\n    \"name\": \"babel-patternplate\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A patternplate project with Babel as build system\",\n    \"scripts\": {\n      \"babel\": \"babel src -D -d lib \"\n    },\n    \"license\": \"MIT\",\n    \"devDependencies\": {\n      \"@babel/cli\": \"^7\",\n      \"@babel/core\": \"^7\",\n      \"@babel/preset-env\": \"^7\"\n    }\n  }\n  ```\n\n  That's it, we are set with a working build system. Thats pretty neat - this way we\n  can use features from the future of JavaScript, even in older runtimes! \n  Let's make the most of this and configure `patternplate` to pick up our transpiled code at `lib/` next.\n\n## Add patternplate\n\n1. Install `patternplate`\n\n  ```\n  npm install -D @patternplate/cli\n  ```\n\n2. Start `patternplate`\n\n  ```\n  yarn patternplate\n  ```\n\n3. In a second terminal, start Babel in watch mode\n\n  ```\n  yarn babel -w\n  ```\n\n4. Access your button component at `http://localhost:1337/pattern/button`.\n   If you used `patternplate` before this should be familiar:\n\n  ![](https://patternplate.github.io/media/images/screenshot-build.svg)\n\n5. Let's see if our Babel build plays nicely with `patternplate`'s file system watchers.\n   Change the color of our **Button** to `palevioletred`:\n\n   ```js\n  module.exports = {\n    html: () => '<button class=\"my-button\">ES2015 Button</button>',\n    css: () => `\n      .my-button {\n        padding: 10px 15px;\n        font-size: 20px;\n        background: none;\n        color: palevioletred;\n        border: 1px solid currentColor;\n      }',\n    `,\n    default: () => {\n      // Nothing implemented yet\n    }\n  }\n  ```\n\n  The `patternplate` demo updates as soon as `babel` has built the changes from\n  `src` to `lib`: \n\n  ![](https://patternplate.github.io/media/images/screenshot-build-changed.svg)\n\n\n## Take aways\n\n* `patternplate` works with all build systems that can emit JavaScript. \n\n* Configure your build to produce artifacts in `lib` and to pick them up with patternplate by default\n\n* The `patternplate` development watcher works with the results of e.g. the Babel watch mode.\n\n## Related topics\n\n* [CLI](../reference/cli?reference-enabled=true)\n\n","contentType":"doc","path":"docs/advanced/build.md","manifest":{"name":"use-patternplate-on-top-of-a-build-system","displayName":"Advanced: Build systems","description":"Learn how to use patternplate on top of your build system","flag":"alpha","options":{"order":7},"tags":["Advanced"],"version":"1.0.0"},"rawManifest":{"displayName":"Advanced: Build systems","description":"Learn how to use patternplate on top of your build system","tags":["Advanced"],"options":{"order":7}}},{"id":"docs/advanced/deploy","contents":"---\ndisplayName: \"Advanced: Deploy to GitHub\"\ndescription: \"Learn how to deploy a static build of your component library to GitHub Pages\"\ntags: \n - Advanced\noptions:\n  order: 6\n---\n\n# Deploy your component library to GitHub Pages\n\n> :timer_clock: **Time invest**: 20 Minutes ––– :woman_student: **Level**: Expert\n\n\n## What to expect\n\nComponent libraries built with `patternplate` are all\nabout sharing your work and having a common place to\nrefer to - the much discussed Single Source of Truth.\n\nTo establish your component library as such you'll want to\ndeploy it as a website.\n\nWe will …\n\n* … learn how to use the `patternplate build` CLI command.\n* … push and publish your component library to GitHub Pages.\n\n## You'll need\n\n* :white_check_mark: You are all set if you followed along [Guide: Build a component](../guides/add-component?guides-enabled=true)\n\n---\n\n* :writing_hand: Text editor\n* :file_folder: patternplate project ([Getting Started Guide](../guides/getting-started?guides-enabled=true))\n\n## Before you start\n\n* Be comfortable with terminal usage\n* Have a working knowledge of `git`\n* Have a GitHub account\n\n## Build a static interface \n\n1. Open a terminal window and change into the directory holding your patternplate project.\n\n2. Execute the following command to produce a static build\nof your component librarie's interface\n\n  ```bash\n  yarn patternplate build --out='docs/patterns' --base='/patterns/'\n  ```\n\n  ![](https://patternplate.github.io/media/casts/cast-build.svg)\n\n3. `patternplate` creates a bunch of files in `docs/patterns` for you\n\n```\ntree docs/patterns/\ndocs/patterns/\n├── api\n│   ├── demo\n│   │   ├── button.html\n│   │   └── hello-world.html\n│   ├── patternplate.web.components.js\n│   ├── patternplate.web.cover-client.js\n│   ├── patternplate.web.demo.js\n│   ├── patternplate.web.mount.js\n│   ├── patternplate.web.probe.js\n│   └── state.json\n├── doc\n│   └── README\n│       └── index.html\n├── index.html\n├── pattern\n│   ├── button\n│   │   └── index.html\n│   └── hello-world\n│       └── index.html\n└── static\n    ├── client.js\n    └── vendors.js\n\n8 directories, 14 files\n```\n\n4. Start a static webserver on `/docs` and open `/`\n\n```bash\nnpx serve docs/ --open\n```\n\n5. Click on the `patterns` folder that shows up in your browser\n\n6. You should see a fully functioning `patternplate` interface on the\n`patterns/` path :tada:. Let's bring this beauty online!\n\n\n## Deploy to GitHub Pages\n\n> :information_source: \n> You may have noticed from our run of `npx serve`: `patternplate build` creates a document root suitable for deployment on any static webserver. This means there is nothing barring you from hosting it from your own systems.\n\nReplace `[username]` with your GitHub username in all commands of this section.\n\n1. Create a [new repository on GitHub](https://github.com/new), \nname it e.g. `my-patternplate`\n\n2. Rerun our build to match its deployment target:\n\n  ```bash\n  yarn patternplate build --out docs --base=/my-patternplate/\n  ```\n\n2. In your local repository, commit your changes\n\n  ```\n  git add docs\n  git commit -m \"docs: deploy static interface\"\n  ```\n\n3. Set the remote of your local repository to your new remote repository on GitHub and push to it\n\n  ```\n  git remote add origin git@github.com:[username]/my-patternplate.git\n  git push -u origin master\n  ```\n\n4. Open your repository settings at `https://github.com/[username]/my-patternplate/settings` and \nscroll down to the **GitHub Pages** section.\n\n5. Click on the dropdown under **Source** and select `master branch docs folder`. Make sure\nto hit the save button next to the dropdown.\n\n6. Navigate your browser to `https://[username].github.com/my-patternplate/`. You should see the very same interface you created locally earlier. \n\n![](https://patternplate.github.io/media/images/screenshot-hello-world.svg)\n\n## Take aways\n\n* `patternplate build` creates a static build of your component library\n* The `--base` flag must match the url pathname the interface will be available at\n* The output of `patternplate build` is well-suited for deployment to GitHub Pages,\n  but works for every static web sever\n\n## Related topics\n\n* [CLI](../reference/cli?reference-enabled=true)\n\n","contentType":"doc","path":"docs/advanced/deploy.md","manifest":{"name":"deploy-your-component-library-to-github-pages","displayName":"Advanced: Deploy to GitHub","description":"Learn how to deploy a static build of your component library to GitHub Pages","flag":"alpha","options":{"order":6},"tags":["Advanced"],"version":"1.0.0"},"rawManifest":{"displayName":"Advanced: Deploy to GitHub","description":"Learn how to deploy a static build of your component library to GitHub Pages","tags":["Advanced"],"options":{"order":6}}},{"id":"docs/advanced/index","contents":"---\nname: \"advanced\"\ndescription: \"Gentle step-by-step introductions to patternplate\"\ndisplayName: \"Advanced\"\noptions:\n  order: 2\n  query: tag=Advanced AND is=doc\n---\n\n","contentType":"doc","path":"docs/advanced/index.md","manifest":{"name":"advanced","displayName":"Advanced","description":"Gentle step-by-step introductions to patternplate","flag":"alpha","options":{"order":2,"query":"tag=Advanced AND is=doc"},"tags":[],"version":"1.0.0"},"rawManifest":{"name":"advanced","description":"Gentle step-by-step introductions to patternplate","displayName":"Advanced","options":{"order":2,"query":"tag=Advanced AND is=doc"}}},{"id":"docs/advanced/theming","contents":"---\ndisplayName: \"Advanced: Theming\"\ndescription: \"Adapt patternplate to your design needs\"\ntags: \n - Advanced\noptions:\n  order: 6\n---\n\n# Make patternplate yours\n\n> :timer_clock: **Time invest**: 30 Minutes ––– :woman_student: **Level**: Expert\n\n`patternplate` has a powerful theming system that\ngives you full control over its interface.\n\nThere are three types of theming configuration:\n\n* **Vector Graphics**: Source string of a SVG. Keys: `logo`, `favicon`\n* **Font Stacks**: CSS font-family value. Keys: `font*` \n* **Colors**: CSS colors. Keys: `color*` \n\n## Related topics\n\n* [Configuration](../reference/configuration?reference-enabled=true)\n\n\n## Theming playground\n\nEdit the code in the demo below to see the values \ntaking effect. You can copy and paste the `ui` object\nto `patternplate.config.js` when you are done.\n\n```widget\nconst React = require(\"react\");\nconst {ComponentDemo} = require(\"@patternplate/widgets\");\n  \nmodule.exports = () => {\n  return (\n    <ComponentDemo id=\"@patternplate/component-themes\"/>\n  );\n};\n```\n","contentType":"doc","path":"docs/advanced/theming.md","manifest":{"name":"make-patternplate-yours","displayName":"Advanced: Theming","description":"Adapt patternplate to your design needs","flag":"alpha","options":{"order":6},"tags":["Advanced"],"version":"1.0.0"},"rawManifest":{"displayName":"Advanced: Theming","description":"Adapt patternplate to your design needs","tags":["Advanced"],"options":{"order":6}}},{"id":"docs/github","contents":"---\ndisplayName: GitHub\nicon: github\noptions:\n  href: https://github.com/patternplate/patternplate\n  order: 100\n---\n","contentType":"doc","path":"docs/github.md","manifest":{"name":"sjecbnxwq4","displayName":"GitHub","description":"","flag":"alpha","options":{"href":"https://github.com/patternplate/patternplate","order":100},"tags":[],"version":"1.0.0"},"rawManifest":{"displayName":"GitHub","icon":"github","options":{"href":"https://github.com/patternplate/patternplate","order":100}}},{"id":"docs/gitter","contents":"---\ndisplayName: Join us on Gitter\nicon: gitter\noptions:\n  href: https://gitter.im/patternplate/Lobby\n  order: 100\n---\n\n","contentType":"doc","path":"docs/gitter.md","manifest":{"name":"ryasveb5n","displayName":"Join us on Gitter","description":"","flag":"alpha","options":{"href":"https://gitter.im/patternplate/Lobby","order":100},"tags":[],"version":"1.0.0"},"rawManifest":{"displayName":"Join us on Gitter","icon":"gitter","options":{"href":"https://gitter.im/patternplate/Lobby","order":100}}},{"id":"docs/guides/add-component","contents":"---\ndisplayName: \"Guide: Build a component\"\ndescription: \"Learn how to build components in patternplate\"\ntags: \n - Guide\noptions:\n  order: 3\n---\n\n# Build your first component in patternplate\n\n> :timer_clock: **Time invest**: 10 Minutes ––– :woman_student: **Level**: Beginner\n\n## What to expect\n\nIn `patternplate` production-grade components form the backbone of your design system. \nThis means there will be coding and cooperation between design and engineering involved\nwhile working in `patternplate`.\n\nDon't worry, we will walk you through the entire process.\n\nWe will …\n\n* … learn how to add a component \n* … style a component with `CSS`\n* … program simple behaviour via `JavaScript`\n\n## You'll need\n\n* :white_check_mark: You are all set if you followed along [Guide: Getting Started](./getting-started?guides-enabled=true)\n\n---\n\n* :writing_hand: Text editor\n* :file_folder: patternplate project ([Getting Started Guide](./getting-started?guides-enabled=true))\n\n## Create a new pattern\n\nLet's improve the component library and add a `Button` component. \nOpen a new terminal window or tab, then procceed with the steps below.\n\n1. Make sure you have `patternplate` running on `localhost:1337`\n\n2. Create a new directory `button` in `lib`.\n\n   ```bash\n   # In a new terminal window\n   mkdir lib/button\n   ```\n\n3. Open a text editor and add a `package.json` to `lib/button`. \n\n  ```bash\n  # create \"package.json\"\n  touch lib/button/package.json\n  ```\n\n   Copy the code below into `lib/button/package.json`\n\n   ```json\n   {\n     \"name\": \"button\",\n     \"version\": \"1.0.0\",\n     \"patternplate\": {\n       \"displayName\": \"Button\"\n     }\n   }\n   ```\n\n4. Create a `demo.js` file at `lib/button`. The interface will update\nautomatically and add **Button** to the components list. \n\n   ```bash\n   # create \"demo.js\"\n   touch lib/button/demo.js\n   ```\n\n   Copy the code below into `lib/button/demo.js`.\n\n   ```js\n   module.exports = {\n     default: function() {\n       // Nothing implemented yet\n     }\n   }\n   ```\n\n   ![](https://patternplate.github.io/media/images/screenshot-component.svg)\n \n5. Click on the **Button** item to display its (still blank) demo canvas.\n   Replace the contents of `lib/button/demo.js` with the code below:\n\n   ```js{2}\n   module.exports = {\n     html: () => '<button class=\"my-button\">My first button</button>',\n     default: () => {\n       // Nothing implemented yet\n     }\n   }\n   ```\n  \n  > :information_source: You might think: HTML in JavaScript. What is this, sorcery? \n  > Don't worry, you can place your HTML in distinct files (demo.html) just fine, too.\n  > The same goes for your CSS (demo.css). See [Demos](../reference/demos?guides-enabled=true&reference-enabled=true#multi-file-demos) for details.\n\n   Saving the file signals the **Button** demo to reload automatically and display the `HTML` you just added.\n\n   ![](https://patternplate.github.io/media/images/screenshot-component-html.svg)\n\n6. Let's throw some `CSS` into the mix.\n   Replace the contents of `lib/button/demo.js` with the code below:\n\n   ```js{4-10}\n   module.exports = {\n     html: () => '<button class=\"my-button\">My first button</button>',\n     css: () => `\n      .my-button {\n        padding: 10px 15px;\n        font-size: 20px; \n        background: none; \n        color: cornflowerblue; \n        border: 1px solid currentColor;\n      }',\n     `,\n     default: () => {\n       // Nothing implemented yet\n     }\n   }\n   ```\n\n   Saving the changes will update your demo to look like this:\n\n   ![](https://patternplate.github.io/media/images/screenshot-component-css.svg)\n\n7. We'll wrap up this tutorial by adding some user interaction to the button. \nLet's count up when clicking on **Button**.\n   Replace the contents of `lib/button/demo.js` with the code below:\n\n\n   ```js{13-18}\n   module.exports = {\n     html: () => '<button class=\"my-button\">My first button</button>',\n     css: () => `\n      .my-button {\n        padding: 10px 15px;\n        font-size: 20px; \n        background: none; \n        color: cornflowerblue; \n        border: 1px solid currentColor;\n      }',\n     `,\n     default: () => {\n       const el = document.querySelector(\"button\"); \n\n       let count = 0;\n       el.addEventListener(\"click\", () => {\n         el.textContent = \"Clicked \" + (++count) + \" times.\"\n       });\n     }\n   }\n   ```\n\n  Click the button to see our program in action\n\n  ![](https://patternplate.github.io/media/images/screencast-button-programmed.gif)\n\n## Take aways\n\n* Demos are the entry to components\n* `demo.js` and `pattern.json` or `package.json` are required to display a component\n* `demo.js` provides `HTML`, `CSS` and JavaScript via the `html`, `css` and `default` exports \n\n  > :information_source: Traditional multi file components work, too. \n  > See [Demos](../reference/demos?guides-enabled=true&reference-enabled=true#multi-file-demos) for details.\n\n* Changes on source files cause demos to reload automatically\n\n## Up next\n\n* [Guide: Write documentation](./write-documentation?guides-enabled=true)\n\n## Related topics\n\n* [Demos](../reference/demos?reference-enabled=true)\n","contentType":"doc","path":"docs/guides/add-component.md","manifest":{"name":"build-your-first-component-in-patternplate","displayName":"Guide: Build a component","description":"Learn how to build components in patternplate","flag":"alpha","options":{"order":3},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Build a component","description":"Learn how to build components in patternplate","tags":["Guide"],"options":{"order":3}}},{"id":"docs/guides/cover","contents":"---\ndisplayName: \"Guide: Convince with a cover\"\ndescription: \"Learn how to catch and convince users with a patternplate cover page\"\ntags: \n - Guide\noptions:\n  order: 7\n---\n\n# Catch and convice with a cover page\n\n> :timer_clock: **Time invest**: 20 Minutes ––– :woman_student: **Level**: Expert\n\n\n## What to expect\n\nYou work dozens of hours on your design system and **of course** you want to brag about it. \n\npatternplate's design fits well to documentation, but for a landing page it should be a bit more fancy.\n\nThis is where the cover feature comes in.\n\n\nWe will …\n\n* … have a look at the necessary configuration for `cover`\n* … design a \"Hello World\" page with vanilla `HTML`, `CSS` and `JavaScript`\n\n## You'll need\n\n* :white_check_mark: You are all set if you followed along [Guide: Build a component](./add-component?guides-enabled=true)\n\n---\n\n* :writing_hand: Text editor\n* :file_folder: patternplate project ([Getting Started Guide](./getting-started?guides-enabled=true))\n\n## Before you start\n\n* Understand `HTML` and `CSS` on a fundamental level\n\n## Configure patternplate\n\n1. Make sure `patternplate` runs on `http://localhost:1337/`\n\n2. Create a `./patternplate.config.js` and copy the following code into it. We are configuring `patternplate` with its defaults to prepare for the next step.\n\n  > :information_source: \n  > See [Reference: Configuration](../reference/configuration) for details about the config keys\n\n```js\n// patternplate.config.js, default config\nmodule.exports = {\n  docs: [\"docs/**/*.md\", \"README.md\"],\n  entry: [\"lib/**/demo.js\"],\n  render: \"@patternplate/render-default/render\",\n  mount: \"@patternplate/render-default/mount\"\n};\n```\n\n3. Create a minimal `./cover.js` file\n\n```js\n// cover.js\nmodule.exports = {\n  default: () => {},\n  html: () => {\n    return `<h1>Hello world</h1>`\n  }\n};\n\n```\n\n4. Reference `./cover.js` from `./patternplate.config.js`\n\n```js\n// patternplate.config.js\nmodule.exports = {\n  docs: [\"docs/**/*.md\", \"README.md\"],\n  entry: [\"lib/**/demo.js\"],\n  render: \"@patternplate/render-default/render\",\n  mount: \"@patternplate/render-default/mount\",\n  cover: \"./cover\" // use cover.js\n};\n```\n\n5. Navigate to `http://localhost:1337/?reload=true` and see the main staple of  tutorial writers world wide, the all-popular **Hello world** message:\n\n  ![](https://patternplate.github.io/media/images/screenshot-cover.svg)\n\nNotice how there are no styles and elements of the `patternplate` interface on screen. That's entirely on purpose: This way the `cover` page is a blank canvas you can do whatever you like with.\n\nThat's cool but we aim for fancy, remember? We'll add some design to this\nin the next step.\n\n## Design a cover page\n\n1. We are into tackling the hardest problems first, so let's center our **Hello World** message both horizontally and vertically :scream:\n\n  Add a `.css` export to your `./cover.js` file\n\n  ```js{3-13}\n  // cover.js\n  module.exports = {\n    css: () => {\n      return `\n        h1 {\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          max-width: 30ch;\n          transform: translate(-50%, -50%);\n          font-family: Helvetica, Arial, sans-serif;\n        }\n      `;\n    },\n    default: () => {},\n    html: () => {\n      return `<h1>Hello world</h1>`\n    }\n  };\n  ```\n\n![](https://patternplate.github.io/media/images/screenshot-cover-css.svg)\n\n2. Add a background gradient to spice things up:\n\n  ```js{7,16}\n  // cover.js\n  module.exports = {\n    css: () => {\n      return `\n        html {\n          margin: 0;\n          background-image: linear-gradient(-45deg, #4504DA, #FF0353);\n        }\n        h1 {\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          max-width: 30ch;\n          transform: translate(-50%, -50%);\n          font-family: Helvetica, Arial, sans-serif;\n          color: #ffffff;\n        }\n      `;\n    },\n    default: () => {},\n    html: () => {\n      return `<h1>Hello world</h1>`\n    }\n  };\n  ```\n\n![](https://patternplate.github.io/media/images/screenshot-cover-background.svg)\n\n\n3. Finally, make the message a link to your component library:\n\n\n  ```js{17-26,33-35}\n  // cover.js\n  module.exports = {\n    css: () => {\n      return `\n        html {\n          background-image: linear-gradient(-45deg,#4504DA,#FF0353);\n        }\n        h1 {\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          max-width: 30ch;\n          transform: translate(-50%, -50%);\n          font-family: Helvetica, Arial, sans-serif;\n          color: #ffffff;\n        }\n        a:link, a:visited {\n          color: inherit;\n          text-decoration-skip-ink: auto;\n          text-decoration-style: dotted;\n          text-decoration-color: rgba(255, 255, 255, .5);\n          transition: .3s text-decoration-color ease-in-out;\n        }\n        a:hover {\n          text-decoration-color: rgba(255, 255, 255, 1);\n        }\n      `;\n    },\n    default: () => {},\n    html: () => {\n      return `\n        <h1>\n          <a href=\"./doc/README\">\n            Explore my-patternplate now\n          </a>\n        </h1>\n      `\n    }\n  };\n  ```\n\n![](https://patternplate.github.io/media/images/screenshot-cover-link.svg)\n\n## Take aways\n\n* A cover can be enabled by the `cover` key in `patternplate.config.js` \n\n* Covers provide are a blank canvas for you to fill with a landing page or anything you can come up with, really.\n\n* Referenced covers are plain JavaScript with e.g. `html`, `css`, `default` exports.\n\n  > :information_source: Conceptually covers are specialized demo entries. \n  > \n  > See [Reference: Demos](../reference/demos) for more details about supported exports, etc.\n\n## Related topics\n\n* [Demos](../reference/demos?reference-enabled=true)\n","contentType":"doc","path":"docs/guides/cover.md","manifest":{"name":"catch-and-convice-with-a-cover-page","displayName":"Guide: Convince with a cover","description":"Learn how to catch and convince users with a patternplate cover page","flag":"alpha","options":{"order":7},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Convince with a cover","description":"Learn how to catch and convince users with a patternplate cover page","tags":["Guide"],"options":{"order":7}}},{"id":"docs/guides/getting-started-app","contents":"---\ndisplayName: \"Guide: Getting Started (App)\"\ndescription: \"Hit the ground running with create-patternplate\"\ntags: \n - Guide\noptions:\n  order: 1\n---\n\n> :information_source: \n> Looking to set up patternplate as a dev project? \n> \n> [Give the CLI Getting Started Guide a go](./getting-started?guides-enabled=true).\n\n# Get started with @patternplate/app\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Beginner\n\n## What to expect\n\n`patternplate` bridges the gaps between engineering and design. While there is a command line interface, it also provides a macOS application to download and view patternplate projects.\n\nWe will …\n\n* … install `@patternplate/app` on your Mac\n\n* … use `@patternplate/app` to clone the Getting Started project\n\n* … start the Getting Started project via the app\n\n> :warning: \n> `@patternplate/app` is a Technical Preview and might have bugs / unimplemented features. We are working hard to get the first stable version\nready for delivery :crossed_fingers: \n> \n> During Alpha we build only macOS bundles, support for other platforms is planned.\n\n## You'll need\n\n* :apple: A Mac with approximately 1GB of free disk space\n\n\n## 1. Install @patternplate/app\n\n* Download `@patternplate/app` by clicking [on this link](https://github.com/patternplate/app/releases/download/Alpha/patternplate-1.0.0-alpha.dmg)\n\n* Click on `Save File` when asked if you want to download `patternplate-1.0.0-alpha.dmg`\n\n![](https://patternplate.github.io/media/screenshots/save-file.png)\n\n* Wait for your download to complete, then locate `patternplate-1.0.0-alpha.dmg` in your Downloads folder\n\n* Double click `patternplate-1.0.0-alpha.dmg` and wait for the image verification to complete\n\n* In the window that opens, drag the `patternplate` icon onto the `Applications` folder like this:\n\n  ![](https://patternplate.github.io/media/screenshots/drag-on-application.gif)\n\n* Locate `patternplate` in `Applications` and double-click on it\n\n* When asked if you want to open `patternplate` click **Open**\n\n  ![](https://patternplate.github.io/media/screenshots/open.png)\n\n* If everything worked the app greets you like this:\n\n ![](https://patternplate.github.io/media/screenshots/greeting.png)\n\n\nCongratulations! :tada: You succesfully installed `@patternplate/app`! Let's put it to use\n\n## 2. Clone your first project\n\nCopy the following URL \n\n```\nhttps://github.com/patternplate/getting-started.git\n```\n\nPaste it into the input field below the greeting and click on **Add**\n\nThe view changes to resemble the following screenshot:\n\n![](https://patternplate.github.io/media/screenshots/cloning.png)\n\nNotice the spinning part in the card for `patternplate/getting-started`? \nThis indicates the project is downloading and installing dependencies. \n\nWait for it to complete, then proceed:\n\n## 3. Start the project\n\nDouble-click on the card for `patternplate/getting-started`. \nA new tab on the top left of the application window opens and the view\nchanges to this:\n\n![](https://patternplate.github.io/media/screenshots/getting-started.png)\n\nThat's it for this guide – you just cloned and started your very first `patternplate` project. :+1:\n\n## Take aways\n\n* There is `@patternplate/app`, a GUI application for easier setup and viewing of `patternplate` projects\n* You can clone patternplate projects by providing a GIT url or open them from your file system\n\n## Up next\n\n* [Guide: Build a component](./add-component?guides-enabled=true)\n\n## Related topics\n\n* [CLI](../reference/cli?reference-enabled=true)\n","contentType":"doc","path":"docs/guides/getting-started-app.md","manifest":{"name":"get-started-with--patternplate-app","displayName":"Guide: Getting Started (App)","description":"Hit the ground running with create-patternplate","flag":"alpha","options":{"order":1},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Getting Started (App)","description":"Hit the ground running with create-patternplate","tags":["Guide"],"options":{"order":1}}},{"id":"docs/guides/getting-started","contents":"---\ndisplayName: \"Guide: Getting Started (CLI)\"\ndescription: \"Hit the ground running with create-patternplate\"\ntags: \n - Guide\noptions:\n  order: 0\n---\n\n> :information_source: \n> You don't want/need to use the CLI?  \n> [Check out our app and let the machine deal with Node.js and GIT](./getting-started-app?guides-enabled=true).\n\n# Your kickstart into patternplate\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Beginner\n\n## What to expect\n\nSetting up a new component library can be a tedious task - but `patternplate` has you covered!\nLet's have a look at how patternplate can help you to get started in 5 minutes, max.\n\nWe will …\n\n* … learn how to use the `create-patternplate` command line tool to initialize a new project\n* … start the `patternplate` dev server to visualize components and documentation\n\n## You'll need\n\n* :computer: Terminal (MacOS: `Terminal.app` or [iTerm](https://www.iterm2.com/) | Windows: [cmder](http://cmder.net/))\n* :turtle: Node.js `>=6` ([Install](https://nodejs.org/en/))\n\n\n## 1. Create a project on the CLI\n\nOpen your terminal emulator and enter the following command.\n\nType the following command into your terminal. You can also\ncopy and paste it directly. Press `Enter` to execute the command.\n\nDon't worry if you did not install `npx` explicitly, it is installed with Node.js automatically.\n\n```bash\nnpx create-patternplate --out my-patternplate --guide\n```\n\nThis will create a project for you and install the relevant dependencies.\nDepending on the quality of your network connection this may take a while.\n\n<!--  ![](https://patternplate.github.io/media/casts/cast-create.svg) -->\n\n\n## 2. Start patternplate via CLI \n\n\nType the following command into your terminal. \n\n```\ncd my-patternplate\n```\n\nThis will navigate your terminal into the `my-patternplate` directory.\n\nLet's spin up a `patternplate` dev server:\n\nLike `npx`, `npm` is available if you installed Node.js.\n\n```bash\nnpm start\n```\n\nYou should see a small loading spinner in your terminal. \n`patternplate` prints the following when it started successfully:\n\n```bash\n✔ Started on http://localhost:1337\n```\n\n## 3. Access the web interface\n\nYou can access the web interface of your patternplate project at `http://localhost:1337/?guides-enabled=true`.\n\nIf everything worked `patternplate` greets you with this screen:\n\n![](https://patternplate.github.io/media/images/screenshot-hello-world.svg)\n\n\n## Take aways\n\n* There is `create-patternplate`, a command line program that helps with boostrapping patternplate quickly.\n\n* `patternplate` provides a command line interface. The default command is `start`, which brings up the web interface on `http://localhost:1337/?guides-enabled=true`.\n\n\n## Up next\n\n* [Guide: Build a component](./add-component?guides-enabled=true)\n\n## Related topics\n\n* [CLI](../reference/cli?reference-enabled=true&guides-enabled=true)\n\n## Shortcut\n\nIf you want to get the result of the getting started guide without \ntyping all commands you can use the ready-made git repository\n\n```bash\ngit clone git@github.com:patternplate/getting-started.git\ncd getting-started\nnpm install\n```\n","contentType":"doc","path":"docs/guides/getting-started.md","manifest":{"name":"your-kickstart-into-patternplate","displayName":"Guide: Getting Started (CLI)","description":"Hit the ground running with create-patternplate","flag":"alpha","options":{"order":0},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Getting Started (CLI)","description":"Hit the ground running with create-patternplate","tags":["Guide"],"options":{"order":0}}},{"id":"docs/guides/index","contents":"---\nname: \"guides\"\ndescription: \"Gentle step-by-step introductions to patternplate\"\ndisplayName: \"Guides\"\noptions:\n  order: 1\n  query: tag=Guide AND is=doc\n---\n","contentType":"doc","path":"docs/guides/index.md","manifest":{"name":"guides","displayName":"Guides","description":"Gentle step-by-step introductions to patternplate","flag":"alpha","options":{"order":1,"query":"tag=Guide AND is=doc"},"tags":[],"version":"1.0.0"},"rawManifest":{"name":"guides","description":"Gentle step-by-step introductions to patternplate","displayName":"Guides","options":{"order":1,"query":"tag=Guide AND is=doc"}}},{"id":"docs/guides/use-widgets","contents":"---\ndisplayName: \"Guide: Document with widgets\"\ndescription: \"Bring your docs to live with widgets\"\ntags: \n - Guide\n - Expert\noptions:\n  order: 6\n---\n\n# Show, don't tell – with widgets\n\n> :timer_clock: **Time invest**: 15 Minutes ––– :woman_student: **Level**: Expert\n\n## What to expect\n\nDocumentation for your components is important, but often is not connected to them very well. \n`patternplate` provides widgets that can embed your components directly into your text documents.\n\nWe will …\n\n* … learn about Markdown code blocks\n* … create `patternplate` widgets\n\n## You'll need\n\n* :white_check_mark: You are all set if you followed along [Guide: Build a component](./add-component?guides-enabled=true)\n---\n\n* :writing_hand: Text editor\n* :file_folder: patternplate project ([Getting Started Guide](./getting-started?guides-enabled=true))\n\n## Before you start\n\n* Have a rough grasp [on Markdown](https://guides.github.com/features/mastering-markdown/)\n\n* Understand the basics of [JSX](https://reactjs.org/docs/introducing-jsx.html)\n\n## Show off your software with code blocks\n\nAmongst other formatting tools Markdown provides a neat way to \ndisplay code blocks. `patternplate` hightlights code blocks automatically\nfor a number of common web languages. Let's try this:\n\n1. Make sure you have `patternplate` running on `localhost:1337`\n\n2. Open `./README.md` with your text editor. We recommend opening the patternplate interface\nnext to your text editor.\n\n3. Append the following code to `./README.md`. Don't worry about the contents too much for\n   now, we just test out syntax highlighting with this:\n\n  ````md\n  ## My first code block\n  ```js\n  const React = require(\"react\");\n  const {ComponentList} = require(\"@patternplate/widgets\");\n\n  module.exports = () => {\n    return (\n      <ComponentList query=\"hello\"/>\n    );\n  };\n  ```\n  ````\n\n  `patternplate` updates automatically and renders your code block like this at the bottom\n  of the `my-patternplate` rendering. Notice the lovely syntax highlighting. :nail_care:\n\n  ![](https://patternplate.github.io/media/images/screenshot-widgets.svg)\n\n\n## Create dynamic lists with ComponentList\n\nThe idea of fusing code and docs is powerful, can we take it even further?\nWhat if you could execute code inside our docs? Turns out `patternplate` lets \nyou do that!\n\n1. Copy your new code block again and replace its language with `widget`.\n\n  ````md{14}\n  ## My first code block\n  ```js\n  const React = require(\"react\");\n  const {ComponentList} = require(\"@patternplate/widgets\");\n\n  module.exports = () => {\n    return (\n      <ComponentList query=\"hello\"/>\n    );\n  };\n  ```\n\n  ## My first widget\n  ```widget\n  const React = require(\"react\");\n  const {ComponentList} = require(\"@patternplate/widgets\");\n\n  module.exports = () => {\n    return (\n      <ComponentList query=\"hello\"/>\n    );\n  };\n  ```\n  ````\n\n  This renders a `ComponentList` widget into the document. The\n  result should look like this:\n\n  ![](https://patternplate.github.io/media/images/screenshot-widgets-list.svg)\n\n  `ComponentList` creates a list of components matching the search query\n  given in its `query` prop. \n  Let's make all components show up in the list next.\n\n\n2. Change the `query` prop of `ComponentList` to `\"is=pattern\"`\n\n  ````md{8}\n  ## My first widget\n  ```widget\n  const React = require(\"react\");\n  const {ComponentList} = require(\"@patternplate/widgets\");\n  \n  module.exports = () => {\n    return (\n      <ComponentList query=\"is=pattern\"/>\n    );\n  };\n  ```\n  ````\n\n  We expect `ComponentList` to list all items that are a `\"pattern\"` now:\n\n  ![](https://patternplate.github.io/media/images/screenshot-widgets-list-pattern.svg)\n\n\n## Embed components with ComponentDemo\n\n1. Create a second widget block in `./README.md` by adding this code at the end of the file:\n\n  ````md\n  ## My second widget\n  ```widget\n  const React = require(\"react\");\n  const {ComponentDemo} = require(\"@patternplate/widgets\");\n  \n  module.exports = () => {\n    return (\n      <ComponentDemo id=\"button\"/>\n    );\n  };\n  ```\n  ````\n\n2. Scroll to the very end of `./README.md` and see a live demo of `Button` embedded directly:\n\n  ![](https://patternplate.github.io/media/images/screenshot-widgets-demo.svg)\n\n\n## Take aways\n\n* Code blocks for selected languages (`js`, `html`, `css`) are syntax-highlighted\n* A special `widget` code block enables inline code execution\n* There is a well-defined set of patternplate widgets for use in Markdown\n* `ComponentList` displays lists of patterns\n* `ComponentDemo` shows a pattern demo\n\n## Up next\n\n* [Guide: Convince with a cover](./cover?guides-enabled=true)\n\n\n## Related topics\n\n* [Documentation](../reference/documentation?reference-enabled=true)\n* [Search](../reference/search?reference-enabled=true)\n* [Widgets](../reference/widgets?reference-enabled=true)\n","contentType":"doc","path":"docs/guides/use-widgets.md","manifest":{"name":"show--don-t-tell---with-widgets","displayName":"Guide: Document with widgets","description":"Bring your docs to live with widgets","flag":"alpha","options":{"order":6},"tags":["Guide","Expert"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Document with widgets","description":"Bring your docs to live with widgets","tags":["Guide","Expert"],"options":{"order":6}}},{"id":"docs/guides/virtual-folders","contents":"---\ndisplayName: \"Guide: Create Virtual folders\"\ndescription: \"Bring order to chaos with search and virtual folders\"\ntags: \n - Guide\noptions:\n  order: 5\n---\n\n# Divide and Conquer with Virtual Folders\n\n> :timer_clock: **Time invest**: 5 Minutes ––– :woman_student: **Level**: Intermediate\n\n\n## What to expect\n\nAs your component library grows you'll find it increasingly difficult \nto find all the sweet components you built. \n\nLearn how the search and tagging system in `patternplate` helps you to \nget a grip on the size and complexity of your component library.\n\nWe will …\n\n* … prepare some meta data\n* … take first steps with patternplate search\n* … create folders in patternplate's sidebar\n\n## You'll need\n\n* :white_check_mark: You are all set if you followed along [Guide: Build a component](./add-component?guides-enabled=true)\n---\n\n* :writing_hand: Text editor\n* :file_folder: patternplate project ([Getting Started Guide](./getting-started?guides-enabled=true))\n\n## Before you start\n\n* Have a rough grasp [on Markdown](https://guides.github.com/features/mastering-markdown/)\n* Read up on [frontmatter](https://jekyllrb.com/docs/frontmatter/)\n\n## Prepare some search data\n\n`patternplate` uses meta data attached to your patterns and docs to \n inform its search query and the virtual folder system.\n\nLet's add some tags to the items in Getting Started.\n\n1. Make sure you have `patternplate` running on `localhost:1337`\n\n2. Add tags to `README.md`. Modify the leading **frontmatter** block\n   to look like this:\n\n  ```md\n  ---\n  displayName: \"my-patternplate\"\n  tags:\n    - hello\n    - welcome\n  ---\n  ```\n\n3. Open `./lib/hello-world/package.json` and attach some tags:\n\n  ```json\n  {\n    \"name\": \"hello-world\",\n    \"version\": \"1.0.0\",\n    \"tags\": [\"hello\", \"world\", \"typography\"],\n    \"patternplate\": {\n      \"displayName\": \"Hello World\"\n    }\n  }\n  ```\n\n4. Now edit and save `./lib/button/package.json` to look like this:\n\n  ```json\n  {\n    \"name\": \"button\",\n    \"version\": \"1.0.0\",\n    \"tags\": [\"hello\", \"world\", \"interaction\"],\n    \"patternplate\": {\n      \"displayName\": \"Button\"\n    }\n  }\n  ```\n\nWe won't see a lot of changes in patternplate for our meta data changes,\nlet's use it for searching in the next section instead.\n\n## First steps with patternplate search\n\nNow we prepared some data, let's have a look at `patternplate` search.\nHang in there for now, we'll explain the relation between search and virtual folders\nin a second.\n\n1. Access the search panel by clicking on the :mag_right: icon\n\n   A search input appears above the content panel.\n\n2. Enter an unstructured query, e.g. \"button\"\n\n   This should give you a result list like below. \n\n   ![](https://patternplate.github.io/media/images/screenshot-virtual.svg)\n\n   Look closely: In this case the search query matched all items - **my-patternplate**, **Button**\n   and **Hello-World**. \n   \n   This happens because fuzzy search tries to match as many items as possible, searching\n   through all meta data and contents.\n\n   Let's try to be more structured about our search.\n\n## Structured search\n\n1. Delete our previous search by clicking on the `x` the search field\n\n2. Enter a structured search query like this: `tags=world`. \n   Don't worry if you don't know what that means just yet.\n \n   This will search for all items that have the tag `world` attached. This results\n   in a list like this:\n\n   ![](https://patternplate.github.io/media/images/screenshot-virtual-search.svg)\n\n   This time around we matched only **Button** and **Hello-World**. That happens because they have both\n   the tag `world` attached, while the **my-patternplate** item does not.\n\n   Visit the [search reference](../reference/search?reference-enabled=true) for detailed information about search queries.\n\n## Create a virtual folder\n\nLet's take this a step further and use our `tags=world` query to create a virtual folder.\nVirtual folders are doc files with special configuration in them. \n\n`patternplate` searches\nfor documenation in `/README.md`, and all `.md` files in `/docs`. \n\nSo we'll add a new file there:\n\n1. Create `docs/my-virtual-folder.md`\n\n  ```bash\n  mkdir docs\n  touch docs/my-virtual-folder.md\n  ```\n\n2. Paste the following code into `docs/my-virtual-folder.md` and save it.\n  \n   ```md\n   ---\n   options:\n     query: tags=world\n   ---\n\n   # My Virtual Folder\n   ```\n\n   This will create a new folder called **My Virtual Folder** in the sidebar:\n\n  ![](https://patternplate.github.io/media/images/screenshot-virtual-folder.svg)\n\n3. Click on the folder to reveal its contents:\n\n  ![](https://patternplate.github.io/media/images/screenshot-virtual-folder-open.svg)\n\n  The folder will hold a list of all patterns matching the search we entered as `options.query`.\n  Using this functionality you can define any number of different virtual folders.\n\n  There are a number of things to note here:\n\n  * `patterns` and `docs` can be listen in a folder, but folders can not\n  * content `*.md` files with defined `options.query` are not displayed in the interface\n  * `patterns` and `docs` can be listed in multiple different virtual folders\n\n## Take aways\n\n* Meta data can be added to documentation in `frontmatter` blocks \n* Tags, flags, etc. can be used to search through both components and docs\n* There is fuzzy and structured search in patternplate\n* Structured search queries can be used to create **Virtual Folders**\n\n## Up next\n\n* [Guide: Enhance docs with widgets](./use-widgets?guides-enabled=true)\n\n\n## Related topics\n\n* [Documentation](../reference/documentation?reference-enabled=true)\n* [Search](../reference/search?reference-enabled=true)\n","contentType":"doc","path":"docs/guides/virtual-folders.md","manifest":{"name":"divide-and-conquer-with-virtual-folders","displayName":"Guide: Create Virtual folders","description":"Bring order to chaos with search and virtual folders","flag":"alpha","options":{"order":5},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Create Virtual folders","description":"Bring order to chaos with search and virtual folders","tags":["Guide"],"options":{"order":5}}},{"id":"docs/guides/write-documentation","contents":"---\ndisplayName: \"Guide: Write documentation\"\ndescription: \"Learn how to use patternplate for living documentation\"\ntags: \n - Guide\noptions:\n  order: 4\n---\n\n# Explain your work with Markdown\n\n> :timer_clock: **Time invest**: 15 Minutes ––– :woman_student: **Level**: Intermediate\n\n\n## What to expect\n\nNo matter how hard you strive for simplicity, you'll always have to describe some aspects\nof your component library in text. \n\n`patternplate` can help you to add rich documentation to components and for the whole of \nyour library - let's see how.\n\nWe will …\n\n* … add some documentation for a component\n* … write docs for generic topics\n* … learn how to control the names of docs in the sidebar\n\n## You'll need\n\n* :white_check_mark: You are all set if you followed along [Guide: Build a component](./add-component?guides-enabled=true)\n\n---\n\n* :writing_hand: Text editor\n* :file_folder: patternplate project ([Getting Started Guide](./getting-started?guides-enabled=true))\n\n## Before you start\n\n* Have a rough grasp [on Markdown](https://guides.github.com/features/mastering-markdown/)\n* Make yourself familiar with [JSON](https://www.impressivewebs.com/what-is-json-introduction-guide-for-beginners/)\n\n## Describe a single component with Markdown\n\nDemos for your components are a great way to document them, but some things need additional text docs. \n\nE.g. the **Hello World** component has a hidden feature: clicking on it\ncounts up. Let's tell the consumers of our component library about this.\n\n1. Make sure you have `patternplate` running on `localhost:1337`\n\n2. Open your terminal and create a new file `lib/hello-world/readme.md` \n\n  ```bash\n  touch lib/hello-world/readme.md\n  ```\n\n3. Copy the following code into `lib/hello-world/readme.md`\n\n  ```md\n  <!-- lib/hello-world/readme.md -->\n  ## Behaviour\n\n  Clicking on a the text will count up from 1\n  ```\n\n4. Navigate to `http://localhost:1337/pattern/hello-world?navigation-enabled=true&components-enabled=true` and scroll down: Your small description has been rendered below the component demo.\n\n![](https://patternplate.github.io/media/images/screenshot-docs.svg)\n\n5. You can also provide structured meta data for a pattern, e.g.\n\n  * **name** - unique identifier for this pattern, e.g. `fancy-button`\n  * **displayName** - human-readable name of the pattern, e.g. `Fancy Button`\n  * **description** - short summary of the component intent, e.g. `Primary CTA element for playful contexts`\n  * **version** - the semver version, e.g. `1.0.0`\n  * **flag** - stability flag, one of `alpha`, `beta`, `rc`, `stable`, `deprecated`\n  * **tags** - list of words describing the pattern\n\n  Meta data for a component is saved in `package.json`, e.g. `lib/hello-world/package.json`\n  Copy the following JSON to `lib/hello-world/package.json`:\n\n  ```json\n  {\n    \"name\": \"hello-world\",\n    \"version\": \"2.0.0\",\n    \"tags\": [\"Getting Started\"],\n    \"patternplate\": {\n      \"flag\": \"stable\",\n      \"displayName\": \"Hello World\"\n    }\n  }\n  ```\n\n  This structured meta data lends itself to indexing nicely and powers much of \n  `patternplate`'s search engine.\n\n  ![](https://patternplate.github.io/media/images/screenshot-docs-json.svg)\n\n\n## Add documentation for a generic topic\n\nYou may have noticed the **my-patternplate** item in the Getting Started project:\n\n![](https://patternplate.github.io/media/images/screenshot-component.svg)\n\nThis represents the `README.md`, which is picked up by `patternplate` automatically.\n\n1. Click on `my-patternplate` to reveal is rendered contents. \n\n2. Also open a text editor.\n  Open both windows side by side gives for an optimal editing experience.\n\n3. Change the text of `README.md` to your liking. Notice how the rendered page\nupdates immediately when you save the file.\n\n4. We'll change the page name in the sidebar next. It is controlled by the `frontmatter` block\nat the beginning of `README.md`. \n\n  Change the `frontmatter` block at the top of the file to something like this\n\n  ```md\n  ---\n  displayName: Introduction\n  ---\n  \n  # You did it! :tada:\n  \n  You successfully installed and started patternplate.\n  ```\n\n  The interface updates automatically to display your changes:\n\n  ![](https://patternplate.github.io/media/images/screenshot-docs-global.svg)\n\n## Take aways\n\n* Documentation in `patternplate` is written in Markdown.\n\n* Meta data in `pattern.json` and `package.json` is an important piece of the documentation puzzle.\n\n* There is a distinction between **local** `lib/**/readme.md` and **global** `docs/**/*.md`\n  documentation. \n  \n* Local docs are displayed under their pattern's demo.\n\n* Global docs show up in the sidebar.\n\n* Sidebar entries can be controlled via `frontmatter` blocks\n\n## Up next\n\n* [Guide: Create Virtual Folders](./virtual-folders?guides-enabled=true)\n\n\n## Related topics\n\n* [Documentation](../reference/documentation?reference-enabled=true)\n* [Demos](../reference/demos?reference-enabled=true)\n","contentType":"doc","path":"docs/guides/write-documentation.md","manifest":{"name":"explain-your-work-with-markdown","displayName":"Guide: Write documentation","description":"Learn how to use patternplate for living documentation","flag":"alpha","options":{"order":4},"tags":["Guide"],"version":"1.0.0"},"rawManifest":{"displayName":"Guide: Write documentation","description":"Learn how to use patternplate for living documentation","tags":["Guide"],"options":{"order":4}}},{"id":"docs/reference/cli","contents":"---\ntags:\n  - Reference\noptions:\n  order: 10\n---\n\n# Reference: CLI\n\n> :woman_student: **Level**: Intermediate\n\nThe `patternplate` command line interface is the default\nway of interacting with `patternplate` functionality.\n\n```bash\nyarn global add @patternplate/cli\n\n# Alternative without global installation\nnpx patternplate [command]\n```\n\n## Usage\n\n```bash\npatternplate start # Start a patternplate server\n✔ Started on \"http://localhost:1337\"\n\npatternplate build --base=\"/\" # Build static interface\n✔ Built to \"docs/patterns\" \n```\n\n## Options\n\n```bash\npatternplate help\n\n  Documentation and development interface for component libraries\n\n  Usage\n  patternplate [command=start] [options]\n\n  Commands\n    start        - Start a patternplate instance in cwd\n    build        - Create a static interface build\n    create       - Create a new patternplate project\n    help         - Show this help\n\n  Start options\n    --cwd        - Working directory to search patternplate.config.js in\n    --port       - Port to start patternplate server on, defaults to 1337, $PORT\n\n  Build options\n    --base       - [REQUIRED] Base path to assume for static hosting, e.g. \"patternplate\" in git.io/patternplate\n    --cwd        - Working directory to search patternplate.config.js in\n    --out        - Directory to save the build in, defaults to \"docs\"\n\n  Create options\n    --cwd        - Working directory to operate in\n    --force      - Overwrite existing directories\n    --out        - Directory to create the new project in\n    --template   - Template to use, defaults to @patternplate/create-default\n    --no-git     - Skip git init\n    --no-install - Skip installation of npm packages\n\n  Examples\n    patternplate\n    ✔ Started on http://localhost:1337\n\n    patternplate --port 1338\n    ✔ Started on http://localhost:1338\n\n    patterplate build --base=\"/\"\n    ✔ Built to ./docs\n\n```\n","contentType":"doc","path":"docs/reference/cli.md","manifest":{"name":"reference--cli","displayName":"Reference: CLI","description":"","flag":"alpha","options":{"order":10},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"tags":["Reference"],"options":{"order":10}}},{"id":"docs/reference/configuration","contents":"---\ntags:\n  - Reference\noptions:\n  order: 11\n---\n\n# Reference: Configuration\n\n> :woman_student: **Level**: Expert\n\n`patternplate` can be configured via `patternplate.config.js`.\n\nIn absence of a `patternplate.config.js` file the defaults are:\n\n```js\nmodule.exports = {\n  docs: [\"docs/**/*.md\"],\n  entry: [\"lib/**/*.js\"],\n  render: \"@patternplate/render-default/render\",\n  mount: \"@patternplate/render-default/mount\"\n};\n```\n\n### docs\n\nAn array of glob patterns `string[]`. \nRelative to `patternplate.config.js`. \n\nFiles matching the glob pattern are considered as sources for documentation.\n\n**Example**\n\n```js\nmodule.exports = {\n  // all .md files next to patternplate.config.js\n  docs: [\"*.md\"] \n};\n```\n\n### entry\n\nAn array of glob patterns `string[]`. \nRelative to `patternplate.config.js`. \n\nFiles matching the glob pattern are considered as demo entries.\n\n**Example**\n\n```js\nmodule.exports = {\n  // All *.demo.js files in dist, e.g. dist/button/button.demo.js\n  entry: [\"dist/**/*.demo.js\"] \n};\n```\n\n### render\n\nAn absolute or relative module id `string`, resolved relative to `patternplate.config.js`.\nThe default export of the resolved module is used as server-side render function.\n\n**Examples**\n\n```js\nmodule.exports = {\n  // use render of the node module @patternplate/render-react\n  render: \"@patternplate/render-react/render\"\n};\n```\n\n```js\nmodule.exports = {\n  // use the file render.js next to patternplate.config.js\n  render: \"./render.js\"\n};\n```\n\n### mount\n\nAn absolute or relative module id `string`, resolved relative to `patternplate.config.js`.\nThe default export of the resolved module is used as client-side mount function.\n\n**Examples**\n\n```js\nmodule.exports = {\n  // use render of the node module @patternplate/render-react\n  render: \"@patternplate/render-react/mount\"\n};\n```\n\n```js\nmodule.exports = {\n  // use the file mount.js next to patternplate.config.js\n  render: \"./mount.js\"\n};\n```\n\n### cover\n\nAn absolute or relative module id `string`, resolved relative to `patternplate.config.js`.\nThe exports of the resolved module are used as a specialized demo that is displayed independently\nof the patternplate web interface on `/`\n\n**Examples**\n\n```js\nmodule.exports = {\n  // use the file cover.js next to patternplate.config.js\n  render: \"./cover.js\"\n};\n```\n\n### ui\n\nA map of theming-related properties. Use this to adapt the interface of `patternplate` to \nyour CI requirements.\n\nThere are three classes of `ui` configuration:\n\n* SVG strings: Source strings of Scalable Vector Graphics\n* Font families: CSS font values\n* Global Colors: CSS Colors that apply to all areas of the interface\n* Themed Colors: CSS Colors that apply to dark (e.g. sidebar) vs light (e.g. Markdown) areas\n\n**Examples**\n\n```js\nmodule.exports = {\n  ui: {\n    logo: `\n    <svg height=\"30\" width=\"30\">\n      <rect widht=\"30\" height=\"30\"/>\n    </svg>`,\n    colorBackgroundDark: \"rgb(15, 15, 50)\",\n    colorBackgroundSecondaryDark: \"rgb(26, 24, 68)\",\n    colorBackgroundTertiaryDark: \"rgb(26, 24, 68)\",\n    colorBorderDark: \"rgb(26, 24, 68)\"\n  }\n};\n```\n\n### ui.logo\n\nAn SVG to use as logo above the main navigation. `patternplate` performs\nsanitization on the provided SVG code to prevent side effects between\nthe embedded SVG and the interface.\n\nGraphics with `height` and `width` of `30` are recommended.\n\n**Examples**\n\n```js\nmodule.exports = {\n  ui: {\n    logo: `\n    <svg height=\"30\" width=\"30\">\n      <rect widht=\"30\" height=\"30\"/>\n    </svg>`\n  }\n};\n```\n\n### ui.favicon\n\nAn SVG to use as favicon in browsers. In clients without SVG favicon support a PNG is generated automatically.  `patternplate` performs\nsanitization on the provided SVG code.\n\n```js\nmodule.exports = {\n  ui: {\n    favicon: `\n    <svg height=\"30\" width=\"30\">\n      <circle cx=\"15\" cy=\"15\" r=\"15\"/>\n    </svg>`\n  }\n};\n```\n\n### ui.fontDefault\n\nCSS font value to use for basic text styling,\ne.g. Links, Paragraphs.\n\n```js\nmodule.exports = {\n  ui: {\n    fontDefault: `Comic Sans`\n  }\n};\n```\n\n### ui.fontHeadline\n\nCSS font value to use for headline styling\n\n```js\nmodule.exports = {\n  ui: {\n    fontHeadline: `Arial, sans-serif`\n  }\n};\n```\n\n### ui.fontCode\n\nCSS font value to use for code\n\n```js\nmodule.exports = {\n  ui: {\n    fontCode: `Menlo, monospace`\n  }\n};\n```\n\n### ui.colorActive\n\nGlobal CSS Color of active color to use througout the interface, e.g. links,\nactivated navigation items.\n\n```js\nmodule.exports = {\n  ui: {\n    colorActive: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorError\n\nGlobal CSS Color for error messages,\ndeprecated / alpha flags.\n\n```js\nmodule.exports = {\n  ui: {\n    colorError: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorWarning\n\nGlobal CSS Color for warning messages and beta flags.\n\n```js\nmodule.exports = {\n  ui: {\n    colorWarning: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorInfo\n\nGlobal CSS Color for info messages\n\n```js\nmodule.exports = {\n  ui: {\n    colorInfo: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorSuccess\n\nGlobal CSS Color for sucess messages and\nstable flags\n\n```js\nmodule.exports = {\n  ui: {\n    colorSucess: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorBackgroundDark\n\nThemed CSS Color for primary background. Applies to e.g.\nsidebar, search.\n\n```js\nmodule.exports = {\n  ui: {\n    colorBackgroundDark: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorBackgroundSecondaryDark\n\nThemed CSS Color for backgrounds. Applies to e.g. active items in sidebar\n\n```js\nmodule.exports = {\n  ui: {\n    colorBackgroundSecondaryDark: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorBackgroundTertiaryDark\n\nThemed CSS Color for backgrounds. Applies to e.g. active labels in sidebar\n\n```js\nmodule.exports = {\n  ui: {\n    colorBackgroundTertiaryDark: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorBorderDark\n\nThemed CSS Color for borders. \n\n```js\nmodule.exports = {\n  ui: {\n    colorBorderDark: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorTextDark\n\nThemed CSS Color for basic text color. \n\n```js\nmodule.exports = {\n  ui: {\n    colorTextDark: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorTextNegatedDark\n\nThemed CSS Color for inverted text color. \n\n```js\nmodule.exports = {\n  ui: {\n    colorTextNegatedDark: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorRecessDark\n\nThemed CSS Color for recessed text color. \n\n```js\nmodule.exports = {\n  ui: {\n    colorRecessDark: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorBackgroundLight\n\nThemed CSS Color for primary background. Applies to e.g. Markdown.\n\n```js\nmodule.exports = {\n  ui: {\n    colorBackgroundLight: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorBackgroundSecondaryLight\n\nThemed CSS Color for backgrounds.\n\n```js\nmodule.exports = {\n  ui: {\n    colorBackgroundSecondaryLight: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorBackgroundTertiaryLight\n\nThemed CSS Color for backgrounds. \n\n```js\nmodule.exports = {\n  ui: {\n    colorBackgroundTertiaryLight: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorBorderLight\n\nThemed CSS Color for borders, e.g. for `<hr/>`.\n\n```js\nmodule.exports = {\n  ui: {\n    colorBorderLight: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorTextLight\n\nThemed CSS Color for basic text color. \n\n```js\nmodule.exports = {\n  ui: {\n    colorTextLight: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorTextNegatedLight\n\nThemed CSS Color for inverted text color. \n\n```js\nmodule.exports = {\n  ui: {\n    colorTextNegatedLight: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.colorRecessLight\n\nThemed CSS Color for recessed text color. \n\n```js\nmodule.exports = {\n  ui: {\n    colorRecessLight: `rgb(255, 0, 0)`\n  }\n};\n```\n\n### ui.showComponents\n\nA boolean value that switches the components on/off from the sidebar.\n\n```js\nmodule.exports = {\n  ui: {\n    showComponents: false\n  }\n};\n```\n","contentType":"doc","path":"docs/reference/configuration.md","manifest":{"name":"reference--configuration","displayName":"Reference: Configuration","description":"","flag":"alpha","options":{"order":11},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"tags":["Reference"],"options":{"order":11}}},{"id":"docs/reference/demos","contents":"---\ntags:\n  - Reference\noptions:\n  order: 12\n---\n\n# Reference: Demos\n\n> :woman_student: **Level**: Expert\n\nDemo files provide the necessary entry points for `patternplate` to\nidentify your components correctly. \n\nA component `demo` is a `JavaScript` file, that provides\n\n* a function on `module.exports.default`\n* meta data in a `package.json` or `pattern.json` file\n\n## Single file demos\n\nDemo files are assumend to be executable JavaScript according to your\nbrowser targets, as `patternplate` does not perform additional transpilation\non them. \n\nThe smallest valid noop demo file is:\n\n```js\nmodule.exports.default = () => {};\n```\n\nIn practice you'll provide a function that creates components according\nto your framework of choice. E.g. with `React`:\n\n```js\nmodule.exports.default = () => React.createElement(\"h1\", {children: [\"Hello world\"]});\n```\n\nAlternatively you can provide `HTML` and `CSS` via exports directly.\nBy convention `patternplate` will use `html` and `css` exports before considering\nany output produced by `default`.\n\n```js\nmodule.exports = {\n  default: () => {},\n  html: () => `<h1 class=\"hello-world\">Hello World</h1>`,\n  css: () => `.hello-world { font-family: sans-serif; color: cornflowerblue; }`\n}\n```\n\n## Multi file demos\n\nYou can also place `HTML` and `CSS` in `demo.html` and `demo.css`, so\nthe following is equivalent to the single file demo above:\n\n```bash\n❯ tree lib\nlib\n└── hello-world\n    ├── demo.css # .hello-world { font-family: sans-serif; color: cornflowerblue; }\n    ├── demo.html # <h1 class=\"hello-world\">Hello World</h1>\n    ├── demo.js # module.exports = {default: () => {}};\n    └── pattern.json # {name: \"hello-world\", version: \"1.0.0\"}\n```\n\n\n## Meta data\n\nMeta data about your component can be provided in `JSON` format.\n`package.json` and `pattern.json` files are read according to the \nfollowing rules: \n\n1. Use `package.json` with `patternplate` object, in absence:\n2. Use `pattern.json`, in absence\n3. Trace the original source via `sourcemaps`, repeat from 1, in absence:\n4. The provided demo entry is ignored\n\n### Supported fields\n\n**package.json**\n\n* name `string`\n* version `string`\n* description `string?`\n* tags: `string[]?`\n* patternplate.displayName: `string?`\n\n```json\n{\n  \"name\": \"button\",\n  \"version\": \"1.0.0\",\n  \"tags\": [\"Interaction\", \"Atom\"],\n  \"patternplate\": {\n    \"displayName\": \"Button\"\n  } \n}\n```\n\n**pattern.json**\n\n* name `string`\n* version `string`\n* description `string?`\n* tags: `string[]?`\n* patternplate.displayName: `string?`\n\n```json\n{\n  \"name\": \"button\",\n  \"displayName\": \"Button\",\n  \"version\": \"1.0.0\",\n  \"tags\": [\"Interaction\", \"Atom\"]\n}\n```\n","contentType":"doc","path":"docs/reference/demos.md","manifest":{"name":"reference--demos","displayName":"Reference: Demos","description":"","flag":"alpha","options":{"order":12},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"tags":["Reference"],"options":{"order":12}}},{"id":"docs/reference/documentation","contents":"---\ntags:\n  - Reference\noptions:\n  order: 13\n---\n\n# Reference: Documentation\n\n> :woman_student: **Level**: Intermediate\n\n`patternplate` supports Markdown for global as well as component documentation.\n\nMarkdown in `patternplate` supports all features of [GitHub flavored markdown][github-flavored-markdown].\n\nAdditionally you can configure the order and display of documentation via [frontmatter][frontmatter] blocks.\n\n## Global documentation\n\nDocumentation that is independent of components is picked according to the `docs` glob pattern\nin `patternplate.config.js`. The default is `[\"docs/**/*.md\", \"README.md\"]`. \n\nThis means in the tree below `README.md`, `docs/readme.md` and `docs/design/colors.md`\nis picked up.\n\n```bash\ntree .\n.\n├── CHANGELOG.md\n├── README.md\n└── docs\n    ├── design\n    │   └── colors.md\n    └── readme.md\n\n2 directories, 4 files\n```\n\nBy default the first `#` headline in the document is the name of the doc item in `patternplate`'s sidebar. If no `#` headline is found the filename is used instead. \n\n## Local documentation\n\nDocumentation that relates to a single pattern  is placed next to the pattern sources.\n\nThe supported file names are `README.md`, `readme.md` and `index.md`. \n\nThose files are rendered below the demo of their pattern.\n\n## Frontmatter \n\nDocumentation in patternplate entries support [frontmatter][frontmatter] blocks. Supported\nproperties are: `order` and `options.displayName`.\n\n* **displayName**: String, Name of the doc item in the sidebar\n* **options.order**: Integer, position in the documentation list. Lower numbers are listed first\n* **options.query**: String, search query. The file is considered a virtual folder. Matching items will be displayed as children.\n* **option.link**: String, absolute url. The file is considered an external link.\n\n```md\n–––\ndisplayName: Read this first\noptions:\n  order: 0 # first in sidebar\n–––\n```\n\n## Syntax highlighting\n\nMarkdown codeblocks with an explicit language are hightlighted automatically. \n\nE.g. the following markdown snippet\n\n````md\n```js\nconsole.log(\"Hello world\");\n```\n````\n\nrenders to the following code block with syntax highlighting.\n\n```js\nconsole.log(\"Hello world\");\n```\n\nMarkdown in `patternplate` can highlight the following languages:\n\n* HTML: `html`, `xml`\n* CSS: `css`\n* JavaScript: `js`, `jsx`\n* TypeScript: `ts`, `tsx`\n* JSON: `json`\n* Markdown: `md`\n* Bash: `bash`\n* Diff: `diff`, `patch`\n\n## Related\n\n* [Reference: Configuration](../reference/configuration)\n* [Reference: Widgets](../reference/widgets)\n\n[frontmatter]: https://jekyllrb.com/docs/frontmatter/\n[github-flavored-markdown]: https://guides.github.com/features/mastering-markdown/\n","contentType":"doc","path":"docs/reference/documentation.md","manifest":{"name":"reference--documentation","displayName":"Reference: Documentation","description":"","flag":"alpha","options":{"order":13},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"tags":["Reference"],"options":{"order":13}}},{"id":"docs/reference/index","contents":"---\nname: \"reference\"\ndescription: \"Detailed technical documetation for patternplate features\"\ndisplayName: \"Reference\"\noptions:\n  order: 3\n  query: tag=Reference AND is=doc\n---\n","contentType":"doc","path":"docs/reference/index.md","manifest":{"name":"reference","displayName":"Reference","description":"Detailed technical documetation for patternplate features","flag":"alpha","options":{"order":3,"query":"tag=Reference AND is=doc"},"tags":[],"version":"1.0.0"},"rawManifest":{"name":"reference","description":"Detailed technical documetation for patternplate features","displayName":"Reference","options":{"order":3,"query":"tag=Reference AND is=doc"}}},{"id":"docs/reference/renderers","contents":"---\ntags:\n  - Reference\noptions:\n  order: 14\n---\n\n# Reference: Renderers\n\n> :woman_student: **Level**: Expert\n\n`patternplate` renderer packages provide necessary glue \ncode to produce code a browser understands (`HTML`, `CSS` and `JavaScript`)\nfrom your components. \n\nRenderers allow `patternplate` to support any frontend framework that\ncan be written in or transformed to `JavaScript` and render `HTML`.\n\n## Core renderers\n\n* `@patternplate/default`: Pass `html` and `css` exports from demos\n* `@patternplate/react`: Render `html` from demo on server, mount on client\n* `@patternplate/styled-components`: Render `html`, `css`, mount on client\n\n## Contracts\n\n`patternplate` renderer packages are assumed to provide server (render) and client-side (mount)\nutilities. \n\nA well-behaved `patternplate` render package provides both `mount` and `render` entry point, e.g.:\n\n* `@patternplate/default/render`\n* `@patternplate/default/mount`\n\nIf your integration target does not support one of the environments, you'll want to reexport\nthe corresponding `@patternplate/render-default` function.\n\n### render\n\nCreate an object representing `HTML` and `CSS` output from an\nobject representing the exports of a demo file.\n\n```ts\ntype Input {\n  /**\n   * Demo function returning a \"component\"\n   * according to semantics of used technology\n   * .default should take precedence over call signature\n   * if present \n   **/\n  default?: (...args: any[]): any;\n  (...args: any[]): any;\n  /** \n   * HTML fragment that may have been provided \n   * by user via export const html = \"\" \n   */\n  html?: string;\n\n  /** \n   * CSS code that may have been provided \n   * by user via export const html = \"\" \n   */\n  css?: string;\n\n  /**\n   * CSS code that may have been provided \n   * by user via export const js = \"\" \n   */\n  js?: string;\n\n  /**\n   * Element mount point in client side\n   * exection contexts.\n   */\n  element?: Node\n}\n\ntype Context {\n  /**\n   * The project relative base path\n   * to the processed pattern\n   */\n  dirname: string;\n}\n\ntype Output {\n  /**\n   * HTML fragment to inject into <head>\n   */\n  head?: string;\n  /**\n   * CSS to inject into <head>\n   */\n  css?: string;\n  /**\n   * HTML fragment to inject into <body> before mount point\n   */\n  before?: string;\n  /**\n   * HTML fragment to inject into <body> inside mount point\n   */\n  html?: string;\n  /**\n   * HTML fragment to inject into <body> after mount point\n   */\n  before?: string;\n  /**\n   * JS code to inject into end of <body>\n   */\n  js?: string;\n}\n\nfunction render(Input, Context): Output;\n```\n\n### mount\n\nPerform the necessary side effects to register \nclient-side functionality, e.g. `ReactDOM.mount`.\n\nReturned `Output` objects will be injected into \nthe host document.\n\n```ts\nfunction mount(Input): Output;\n```\n","contentType":"doc","path":"docs/reference/renderers.md","manifest":{"name":"reference--renderers","displayName":"Reference: Renderers","description":"","flag":"alpha","options":{"order":14},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"tags":["Reference"],"options":{"order":14}}},{"id":"docs/reference/search","contents":"---\ntags:\n  - Reference\noptions:\n  order: 16\n---\n\n# Reference: Search\n\n> :woman_student: **Level**: Beginner\n\n`patternplate` provides a powerful search engine on top of your component library.\n\nAccess the search panel by clicking on the :mag_right: icon in the bottom\nright corner of the interface. \n\nSearch may also be invoked by the shortcut `Control + Option + Space`.\n\n## Fuzzy search\n\nBy default patternplate will perform a fuzzy search over all fields and content that accounts for minor typos. \n\nE.g. `buton` will yield a result list that contains the **Button** pattern.\n\n## Structured search\n\nStructured search complements fuzzy search with more fine grained control.\n\nYou can enter in a format of `[key]=[value]`, e.g. `version=1.0.0` has the\nkey `version` and a value `1.0.0`. \n\n### flag\n\n> with a flag of `value`\n\n`flag` queries are useful to find groups of patterns that\ndo / do not satisfy stability requirements.\n\n| Value | Order | Description | \n|:------|:-----:|:---\n| `alpha`  | 0 | **Default**. First draft\n| `beta`   | 1 | Reviews conducted\n| `rc`     | 2 | API consent reached\n| `stable` | 3 | API has stabilized\n| `deprecated` | 0 | Flagged for removal. Do not use.\n\nWhen using a quantitive operator (`>`, `>=`, `<`, `<=`) the\norder is used to determine what larger/smaller than means \naccording to\n\n```\n alpha (0) = deprecated (0) < alpha (1) < beta (1) < rc (2) < stable (3)\n```\n\n**Examples**\n\n* [flag=beta](?search-enabled=true&search=flag=beta) - with a flag of `beta`\n* [flag>=beta](?search-enabled=true&search=flag>=beta) - with a flag greater than `beta` (`rc`, `stable`)\n\n\n### is\n\n> with a type of `value`\n\n`is` queries are useful to limit other queries to either `pattern` or `doc` items.\n\n| Value | Description | \n|:------|:---\n| `pattern`  | Software componens matched via `config.entry`\n| `doc`   | Documenation items matched via `config.docs`\n\n\n**Examples**\n\n* [is=doc](?search-enabled=true&search=is=doc)\n* [is!=pattern](?search-enabled=true&search=is!=pattern)\n\n### has\n\n> has `property` of `value`\n\n`has` queries find items that have defined qualities\nattached to them.\n\n| Value | Description | \n|:------|:---\n| `docs`  | Documentation attched via a colocated `md` file\n| `flag`  | Stability flag specified via manifest `JSON`\n| `version` | Semantic version specified via manifest `JSON`\n| `description` | Short description provided via manifest `JSON`\n| `displayName` | Display name for patternplate configured via manifest `JSON`\n| `tags` | A non-empty list of tags is attached via manifest `JSON`\n\n**Examples**\n\n* [has=docs](?search-enabled=true&search=has=docs)\n* [has!=flag](?search-enabled=true&search=has!=flag)\n* [has=version](?search-enabled=true&search=has=version)\n\n### tags\n\n> has a tag of `value`\n\n`tags` queries match items if they have a tag of `value` attached.\n\n**Examples**\n\n* [tags=Interaction](?search-enabled=true&search=tags=Interaction)\n* [tags=Primitives](?search-enabled=true&search=tags=Primitives)\n* [tags!=Widgets](?search-enabled=true&search=tags!=Widgets)\n\n### version\n\n> has a version satisfying `value`\n\n`version` queries find items that match given `semver` ranges\n\n**Examples**\n\n* [version<1.0.0](?search-enabled=true&search=version<1.0.0)\n* [version=1.0.0](?search-enabled=true&search=version=1.0.0)\n* [version>=0.1](?search-enabled=true&search=version>=0.1)\n\n## path\n\n> is located at `path`\n\nSupports the special match operator: `*=` for glob matching\n\n**Examples**\n\n* [path=docs/why.md](?search-enabled=true&search=path%3Ddocs%2Fwhy.md)\n* [path\\*=components/next-generation/\\*](?search-enabled=true&search=search=path*%3Dcomponents%2Fnext-generation%2F*)\n* [path\\*=docs/\\*w\\*](?search-enabled=true&search=path*%3Ddocs%2F*w*)\n\n## Logical operators\n\nSearch queries can be filtered `AND`, expanded `OR` and grouped `()` with logical operators.\n\n**Examples**\n\n* [flag=beta AND tags!=Widget](?search-enabled=true&search=flag%3Dbeta%20AND%20tags!%3DWidget)\n\n  with a `flag` of beta if not tagged as `Widget`\n\n* [(version<=1 OR flag!=stable) AND is=pattern](?search-enabled=true&search=version%3C%3D1%20OR%20flag!%3Dstable%20is=pattern)\n  \n  with version greator or equal `1.0.0` **or** a flag other than stable, if it is a pattern.\n","contentType":"doc","path":"docs/reference/search.md","manifest":{"name":"reference--search","displayName":"Reference: Search","description":"","flag":"alpha","options":{"order":16},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"tags":["Reference"],"options":{"order":16}}},{"id":"docs/reference/static","contents":"---\ntags:\n  - Reference\noptions:\n  order: 17\n---\n\n# Reference: Static Files\n\n> :woman_student: **Level**: Beginner\n\nStatic files such as images, fonts, videos etc. can\nbe saved into the `./static` folder and referenced\nfrom other resources in `patternplate` via the \n`api/static` route.\n\n## Example\n\nA `patternplate` server that starts in the file tree below\nwill expose the following routes: \n\n```\n❯ tree .\n.\n├── patternplate.config.js\n└── static\n    ├── intro.mp4\n    ├── logo.svg\n    └── mood.png\n```\n\n| Route | File |\n|:--|:--\n| `/api/static/intro.mp4` | static/intro.mp4 \n| `/api/static/logo.svg` | static/logo.svg \n| `/api/static/mood.png` | static/mood.png \n","contentType":"doc","path":"docs/reference/static.md","manifest":{"name":"reference--static-files","displayName":"Reference: Static Files","description":"","flag":"alpha","options":{"order":17},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"tags":["Reference"],"options":{"order":17}}},{"id":"docs/reference/widgets","contents":"---\ntags:\n  - Reference\noptions:\n  order: 15\n---\n\n# Reference: Widgets\n\n> :woman_student: **Level**: Expert\n\n`patternplate` provides components that can be used in Markdown.\nThis allows you to bring your documenation to live with e.g. actual, real component demos.\n\n## Component List\n\n`<ComponentList />` displays an unordered list of patterns matching a search query.\nPlacing the following code inside a `widget` code block creates a list\nof all patterns with the tag `Widget`.\n\n````md\n```widget\nconst React = require(\"react\");\nconst {ComponentList} = require(\"@patternplate/widgets\");\n\nmodule.exports = () =>  <ComponentList query=\"tags=Widget\" />;\n```\n````\n\n```widget\nconst React = require(\"react\");\nconst {ComponentList} = require(\"@patternplate/widgets\");\n\nmodule.exports = () => <ComponentList query=\"tags=Widget\" />;\n```\n\n\n## Component Demo\n\n`<ComponentDemo />` displays the demo for the component referenced via `id`.\n\n````md\n```widget\nconst React = require(\"react\");\nconst {ComponentDemo} = require(\"@patternplate/widgets\");\n\nmodule.exports = () => <ComponentDemo id=\"button\" />;\n```\n````\n\n\n```widget\nconst React = require(\"react\");\nconst {ComponentDemo} = require(\"@patternplate/widgets\");\n\nmodule.exports = () => <ComponentDemo id=\"button\" />;\n```\n","contentType":"doc","path":"docs/reference/widgets.md","manifest":{"name":"reference--widgets","displayName":"Reference: Widgets","description":"","flag":"alpha","options":{"order":15},"tags":["Reference"],"version":"1.0.0"},"rawManifest":{"tags":["Reference"],"options":{"order":15}}},{"id":"docs/roadmap","contents":"---\noptions:\n  order: 4\n---\n\n# Roadmap\n\nWe are far from being done with `patternplate`. See\nthe lists below for some of the highlights we will work on in the next months.\n\n## Analysis\n\n* Global dependency tree\n* Track references between docs and components\n* Create screenshots of pattern demos automatically\n\n## Editing \n\n* A markdown editor\n* Live editing of widget code blocks\n* Multiple component variants from one demo file\n* Embeddable component docs \n* Single file components with `json` and `md` \n* mermaid support\n\n## Integration\n\n* Search on the command line\n* Edit this file link for docs and components\n* Improved error propagation\n* A VSCode-esque Plugin API (Technical Preview)\n","contentType":"doc","path":"docs/roadmap.md","manifest":{"name":"roadmap","displayName":"Roadmap","description":"","flag":"alpha","options":{"order":4},"tags":[],"version":"1.0.0"},"rawManifest":{"options":{"order":4}}},{"id":"docs/why","contents":"---\ndisplayName: Why patternplate\noptions:\n  order: -1\n---\n\n> :information_source: \n> Already sold on patternplate and want to know **how** things work instead of **why** we built them? This way: \n> * [Develop in patternplate with the CLI](./guides/getting-started?guides-enabled=true)\n> * [View your component library via @patternplate/app](./guides/getting-started-app?guides-enabled=true)\n\n# Create better Design Systems\n\nAt SinnerSchrader we build and maintain massive design systems for our clients every day. \n\nBecause we wanted to use a tool that can cater to a very wide range of different projects\nand helps our designers and engineers to connect, we set to build our own.\n\nOur experience with creating beautiful, useful, industry-grade design systems is gathered in patternplate. \n\nWe think you might find it just as useful as we do.\n\n\n## Principles\n\n### Come as you are\n\n> Not a CLI, not an app. Both.\n\nWork in the environment you are comfortable with and expend your time for great design and engineering work instead of struggling with tools made for other disciplines.\n\n### Establish a Source of Truth\n\n> Your work is so much more than its parts.\n\nMeld code and documentation into something more valuable – a real source of truth that is always up to date by design.\n\n### Bring Order to Chaos\n\n> Make sense of your design universe with meta data.\n\nDescribe your tokens and components with a fixed schema to help everyone to understand, use and remix your work.\n\n### Stay in touch with your work\n\n> Manipulate your design system directly.\n\nEdit your components, tokens and documentation and see how patternplate updates your Design System without reloading.\n\n### Be as free as the web\n\n>  HTML, CSS and JavaScript – that's all it takes.\n\nWe supports component-specific stacks, so you don't have to commit to a single technology.\nWan't to integrate a Vue component in a React Design Sytem? Thats perfectly possible with patternplate.\n\n### Real components. Period.\n\n> Show and tell with code instead of faking it.\n\npatternplate uses real-world, production-level code components for demos and examples.\n\nThis saves you from wasting time polishing components that never see the light of day and makes the relation between Design System and product transparent.\n\n\n## Built to connect\n\nWe created patternplate to connect things and people that belong together. Reaching out and understanding each other often is the best way to improve.\n\n* The abstract and the concrete\n* Documentation and implementation\n* Principles and examples\n* Designers and engineers\n\n## A tool worthy of your best work\n\npatternplate builds on our experience\nwith massive, production-grade component libraries worked on by dozens of designers and engineers to build products that serve millions of users every day.\n\nTheir diverse needs went into the design of the feature set of patternplate – we like to think that after years of refining, we hit a sweet spot between expert-level tool and approachability.\n\n### Super-powered search system\n\nA search that does both fuzzy search and structured search queries helps you \nto find what you are looking for quickly and reliably.\n\n### Theme patternplate your way\n\nConfigure all colors, fonts, logos and icons\nin patternplate to match your design requirements.\n\n### Real-time updates\n\nYou'll never have to reload your browser –\njust edit files in your text editor and save, everything in your design system will update automatically.\n\n### Give context with Markdown docs\n\nWrite documentation both for overarching principles and related directly to your components in the well-known Markdown format.\n\n### Stay flexible with labels\n\nInstead of pressing components and documentation into an inflexible hierarchy of \ndirectories, patternplate provides a labeling system – combined with virtual folders\nbased on our search engine you can create lists and item trees for every conceivable\nuse case very quickly.\n\n### Inline demos\n\nEmbed interactive component demos directly into your documentation to make your point\nand let the reader experience it with an example.\n\n### Isolated component workbench\n\nDevelop and test your components isolated \nfrom patternplate and other parts of your\ndesign system.\n\n### Your system, your technologies\n\nIf it works on the web, it works with patternplate. By fundamentally using just\nHTML, CSS and JavaScript, we can accept any input that may be rendered or built into the common web technologies. \n\nThis includes popular rendering libraries like React, Angular and Vue.js, transpilers likes Babel or TypeScript and preprocessors like SASS, PostCSS or less.js.\n\nYou can even mix your tools and decide to use different technologies for different components in the same design system.\n\n### All open, zero lock-in\n\npatternplate is built with open source and standard technologies from the ground up. \nLeveraging the Node.js ecosystem and web standards it ensures you always can take full control if you need to.\n\nLicensed under the MIT license, nothing bars you from forking and adapting patternplate to your needs.\n\n\n\n","contentType":"doc","path":"docs/why.md","manifest":{"name":"create-better-design-systems","displayName":"Why patternplate","description":"","flag":"alpha","options":{"order":-1},"tags":[],"version":"1.0.0"},"rawManifest":{"displayName":"Why patternplate","options":{"order":-1}}}],"type":"root"},"meta":{"id":"root","children":[{"id":"main-navigation","artifact":"components/legacy/lib/main-navigation/demo.js","contents":null,"contentType":"pattern","source":"components/legacy/src/main-navigation/demo.js","files":["components/legacy/src/main-navigation/demo.js","components/legacy/src/main-navigation/index.js"],"path":"components/legacy/src/main-navigation/pattern.json","manifest":{"displayName":"Main Navigation","version":"1.0.0","build":true,"display":true,"flag":"stable","options":{},"name":"main-navigation","description":"Primary navigation tree with sections and toolbar","tags":["Navigation"]},"rawManifest":{"name":"main-navigation","displayName":"Main Navigation","description":"Primary navigation tree with sections and toolbar","flag":"stable","options":{},"tags":["Navigation"],"version":"1.0.0"},"errors":[]},{"id":"@patternplate/component-button","artifact":"components/next-generation/button/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/button/demo.js","files":["components/next-generation/button/demo.js","components/next-generation/button/lib","components/next-generation/button/node_modules","components/next-generation/button/src","components/next-generation/button/tsconfig.json","components/next-generation/button/tsconfig.tsbuildinfo"],"path":"components/next-generation/button/package.json","manifest":{"displayName":"Component: Button","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-button","description":"Render basic button","tags":[]},"rawManifest":{"name":"@patternplate/component-button","displayName":"Component: Button","description":"Render basic button","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-code","artifact":"components/next-generation/code/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/code/demo.js","files":["components/next-generation/code/demo.js","components/next-generation/code/lib","components/next-generation/code/node_modules","components/next-generation/code/src","components/next-generation/code/tsconfig.json","components/next-generation/code/tsconfig.tsbuildinfo","components/next-generation/code/yarn.lock"],"path":"components/next-generation/code/package.json","manifest":{"displayName":"Component: Code","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-code","description":"Render formatted and syntax highlighted source code","tags":[]},"rawManifest":{"name":"@patternplate/component-code","displayName":"Component: Code","description":"Render formatted and syntax highlighted source code","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-flag","artifact":"components/next-generation/flag/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/flag/demo.js","files":["components/next-generation/flag/demo.js","components/next-generation/flag/lib","components/next-generation/flag/node_modules","components/next-generation/flag/src","components/next-generation/flag/tsconfig.json","components/next-generation/flag/tsconfig.tsbuildinfo"],"path":"components/next-generation/flag/package.json","manifest":{"displayName":"Component: Flag","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-flag","description":"Color-coded stability states","tags":[]},"rawManifest":{"name":"@patternplate/component-flag","displayName":"Component: Flag","description":"Color-coded stability states","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-headline","artifact":"components/next-generation/headline/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/headline/demo.js","files":["components/next-generation/headline/demo.js","components/next-generation/headline/lib","components/next-generation/headline/node_modules","components/next-generation/headline/src","components/next-generation/headline/tsconfig.json","components/next-generation/headline/tsconfig.tsbuildinfo"],"path":"components/next-generation/headline/package.json","manifest":{"displayName":"Component: Headline","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-headline","description":"Render basic headline","tags":[]},"rawManifest":{"name":"@patternplate/component-headline","displayName":"Component: Headline","description":"Render basic headline","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-icon","artifact":"components/next-generation/icon/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/icon/demo.js","files":["components/next-generation/icon/demo.js","components/next-generation/icon/lib","components/next-generation/icon/node_modules","components/next-generation/icon/src","components/next-generation/icon/tsconfig.json","components/next-generation/icon/tsconfig.tsbuildinfo"],"path":"components/next-generation/icon/package.json","manifest":{"displayName":"Component: Icon","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-icon","description":"Render svg icons","tags":[]},"rawManifest":{"name":"@patternplate/component-icon","displayName":"Component: Icon","description":"Render svg icons","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-info-pane","artifact":"components/next-generation/info-pane/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/info-pane/demo.js","files":["components/next-generation/info-pane/demo.js","components/next-generation/info-pane/lib","components/next-generation/info-pane/node_modules","components/next-generation/info-pane/src","components/next-generation/info-pane/tsconfig.json","components/next-generation/info-pane/tsconfig.tsbuildinfo"],"path":"components/next-generation/info-pane/package.json","manifest":{"displayName":"Component: Info Pane","version":"3.2.7","build":true,"display":true,"flag":"alpha","options":{},"name":"@patternplate/component-info-pane","description":"Display related data in a HUD-like container","tags":[]},"rawManifest":{"name":"@patternplate/component-info-pane","displayName":"Component: Info Pane","description":"Display related data in a HUD-like container","flag":"","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-logo","artifact":"components/next-generation/logo/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/logo/demo.js","files":["components/next-generation/logo/demo.js","components/next-generation/logo/lib","components/next-generation/logo/node_modules","components/next-generation/logo/src","components/next-generation/logo/tsconfig.json","components/next-generation/logo/tsconfig.tsbuildinfo"],"path":"components/next-generation/logo/package.json","manifest":{"displayName":"Component: Logo","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-logo","description":"Render patternplate logo","tags":[]},"rawManifest":{"name":"@patternplate/component-logo","displayName":"Component: Logo","description":"Render patternplate logo","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-main-header","artifact":"components/next-generation/main-header/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/main-header/demo.js","files":["components/next-generation/main-header/demo.js","components/next-generation/main-header/lib","components/next-generation/main-header/node_modules","components/next-generation/main-header/src","components/next-generation/main-header/tsconfig.json","components/next-generation/main-header/tsconfig.tsbuildinfo"],"path":"components/next-generation/main-header/package.json","manifest":{"displayName":"Component: Main Header","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-main-header","description":"Render patternplate navigation header","tags":[]},"rawManifest":{"name":"@patternplate/component-main-header","displayName":"Component: Main Header","description":"Render patternplate navigation header","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-markdown","artifact":"components/next-generation/markdown/demo.js","contents":"\n\n[Github Flavoured Markdown](https://github.github.com/gfm/) is supported. \n\nFor basic usage including tables, syntax highlighting, \ntask lists and emojis see the [Github Markdown Guide](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown)\n\nFor patternplate-specific syntax extensions see our guides: \n\n* [Write Documentation](../../../docs/guides/write-documentation.md)\n\n## See also\n\n* [Code](../code)\n","contentType":"pattern","source":"components/next-generation/markdown/demo.js","files":["components/next-generation/markdown/demo.js","components/next-generation/markdown/lib","components/next-generation/markdown/node_modules","components/next-generation/markdown/README.md","components/next-generation/markdown/src","components/next-generation/markdown/tsconfig.json","components/next-generation/markdown/tsconfig.tsbuildinfo"],"path":"components/next-generation/markdown/package.json","manifest":{"displayName":"Component: Markdown","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-markdown","description":"Render markdown sources to rich HTML documents","tags":[]},"rawManifest":{"name":"@patternplate/component-markdown","displayName":"Component: Markdown","description":"Render markdown sources to rich HTML documents","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-search","artifact":"components/next-generation/search/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/search/demo.js","files":["components/next-generation/search/demo.js","components/next-generation/search/index.js","components/next-generation/search/lib","components/next-generation/search/node_modules","components/next-generation/search/src","components/next-generation/search/tsconfig.json","components/next-generation/search/tsconfig.tsbuildinfo"],"path":"components/next-generation/search/package.json","manifest":{"displayName":"Component: Search","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-search","description":"Render patternplate search","tags":[]},"rawManifest":{"name":"@patternplate/component-search","displayName":"Component: Search","description":"Render patternplate search","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-tag","artifact":"components/next-generation/tag/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/tag/demo.js","files":["components/next-generation/tag/demo.js","components/next-generation/tag/lib","components/next-generation/tag/node_modules","components/next-generation/tag/src","components/next-generation/tag/tsconfig.json","components/next-generation/tag/tsconfig.tsbuildinfo"],"path":"components/next-generation/tag/package.json","manifest":{"displayName":"Component: Tag","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-tag","description":"Render a color-coded tag","tags":[]},"rawManifest":{"name":"@patternplate/component-tag","displayName":"Component: Tag","description":"Render a color-coded tag","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-text","artifact":"components/next-generation/text/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/text/demo.js","files":["components/next-generation/text/demo.js","components/next-generation/text/lib","components/next-generation/text/node_modules","components/next-generation/text/src","components/next-generation/text/tsconfig.json","components/next-generation/text/tsconfig.tsbuildinfo"],"path":"components/next-generation/text/package.json","manifest":{"displayName":"Component: Text","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-text","description":"Render basic text","tags":[]},"rawManifest":{"name":"@patternplate/component-text","displayName":"Component: Text","description":"Render basic text","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]},{"id":"@patternplate/component-themes","artifact":"components/next-generation/themes/demo.js","contents":null,"contentType":"pattern","source":"components/next-generation/themes/demo.js","files":["components/next-generation/themes/demo.js","components/next-generation/themes/lib","components/next-generation/themes/node_modules","components/next-generation/themes/src","components/next-generation/themes/tsconfig.json","components/next-generation/themes/tsconfig.tsbuildinfo"],"path":"components/next-generation/themes/package.json","manifest":{"displayName":"Component: Themes","version":"3.2.7","build":true,"display":true,"flag":"stable","options":{},"name":"@patternplate/component-themes","description":"Theme definitions for patternpalte components","tags":[]},"rawManifest":{"name":"@patternplate/component-themes","displayName":"Component: Themes","description":"Theme definitions for patternpalte components","flag":"stable","options":{},"tags":[],"version":"3.2.7"},"errors":[]}]}}